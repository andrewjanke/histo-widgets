#! /usr/bin/env perl
#
# Andrew Janke - a.janke@gmail.com
# http://a.janke.googlepages.com/
#
# Copyright 2006 Andrew Janke, The University of Queensland
#
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies.
# The author makes no representations about the suitability of this 
# software for any purpose.  It is provided "as is" without express 
# or implied warranty.

$| = 1;

use strict;
use warnings "all";
use Getopt::Long;
use Pod::Usage;
use File::Basename;
use File::Temp qw/ tempdir /;

# until I get organised and do this properly
my $PACKAGE = &basename($0);
my $VERSION = '1.0.0';
my $PACKAGE_BUGREPORT = '"Andrew Janke" <a.janke@gmail.com>';

my($Help, $Usage, $me, @opt_table, %opt, $ifile, $ofile, $history);

$me = &basename($0);
%opt = (
   'verbose' => 0,
   'clobber' => 0,
   'fake' => 0,
   'tmpdir' => undef,
   'scale' => 0,
   'timepoint' => 0,
   'start' => undef,
   'count' => undef,
   );

# get history string
chomp($history = `date`);
$history .= '>>>> ' . join(' ', $me, @ARGV);

# check arguments
&GetOptions(
   'help|?' => \$opt{'help'},
   'man' => \$opt{'man'},
   'v|verbose' => \$opt{'verbose'},
   'c|clobber' => \$opt{'clobber'},
   'version' => sub { &print_version_info },
   'f|fake' => \$opt{'fake'},
   't|tmpdir=s' => \$opt{'tmpdir'},
   
   'scale=i' => \$opt{'scale'},
   'timepoint=i' => \$opt{'timepoint'},
   
   'start=s' => \$opt{'start'},
   'count=s' => \$opt{'count'},
   
   ) or pod2usage('-verbose' => 1) && exit;
   

# handle -man, -help or missing args
pod2usage('-verbose' => 1) if $opt{'help'};
pod2usage('-exitstatus' => 0, '-verbose' => 2) if $opt{'man'};
pod2usage('-verbose' => 0) && exit if ($#ARGV < 1);
   
# get and check for files
$ifile = $ARGV[0];
$ofile = $ARGV[1];

die "$me: Couldn't find $ifile\n" if (!-e $ifile);
die "$me: $ofile exists!, use -clobber to overwrite\n" if (!$opt{'clobber'} && -e $ofile);


my($h5_data_id, $buf, $ds_xsize, $ds_ysize, %rgb_map, @map_files, $size, $c);

$h5_data_id = "\'/DataSet/ResolutionLevel\ " . $opt{'scale'} . 
   "/TimePoint\ " . $opt{'timepoint'} . "/Channel\ 0/Data\'";

   
# get image size
chomp($buf = `h5dump -H -d $h5_data_id $ifile | grep DATASPACE`);
$buf =~ s/.*?1\,\ //;
$buf =~ s/\ \).*//;
$buf =~ s/\ //g;

print "BUF: $buf\n" if $opt{'verbose'};
($ds_xsize, $ds_ysize) = split(/\,/, $buf, 2);


# extract the HDF from ims, combine RGB from separate channels
%rgb_map = (0 => 'R', 1 => 'G', 2 => 'B');
@map_files = (); 
foreach $c (sort(keys(%rgb_map))){
   my $mfile = "$opt{'tmpdir'}/$rgb_map{$c}.raw";
   &do_cmd('h5dump', '-d', "/DataSet/ResolutionLevel $opt{'scale'}/TimePoint $opt{'timepoint'}/Channel ${c}/Data", 
      ((defined($opt{'start'})) ? "--start=$opt{'start'}" : ()),
      ((defined($opt{'count'})) ? "--count=$opt{'count'}" : ()),
      '-b', 'LE', '-o', $mfile,
      $ifile);
   
   push(@map_files, "GRAY:$mfile")
   }

# convert to output file format
if(defined($opt{'count'})){
   $size = "${oxs}x${oys}";
   }
else{
   $size = "${ds_xsize}x${ds_ysize}";
   }
&do_cmd('convert', '-size', $size, '-depth', 8,
   @map_files, '-set', 'colorspace', 'RGB', '-combine', $ofile); 


# add the history string to the output file
#&do_cmd('minc_modify_header',
#   '-sappend', ":history='$history'",
#   $outfile);


sub do_cmd {
   print STDOUT "@_\n" if $opt{'verbose'};
   if(!$opt{'fake'}){
      system(@_) == 0 or die "\n$me: Failed executing @_\n\n";
      }
   }

sub print_version_info {
   print STDOUT "\n$PACKAGE version $VERSION\n".
                "Comments to $PACKAGE_BUGREPORT\n\n";
   exit;
   }
